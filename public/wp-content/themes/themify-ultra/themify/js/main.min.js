"use strict";
var Themify;
(function () {
  var m = window;
  var k = document;
  var w = jQuery;
  Themify = {cssLazy: {}, jsLazy: {}, jsCallbacks: {}, cssCallbacks: {}, fontsQueue: {}, is_min: false, events: {}, body: null, is_builder_active: false, is_builder_loaded: false, w: null, h: null, isTouch: false, device: "desktop", isRTL: false, lazyDisable: false, lazyScrolling: null, url: null, js_modules: null, css_modules: null, jsUrl: null, observer: null, hasDecode: null, triggerEvent(a, b, c) {
    let d;
    if (b === "click" || b === "submit" || b === "input" || b === "change" && !c || b.indexOf("pointer") === 0 || b.indexOf("touch") === 0 || b.indexOf("mouse") === 0) {
      if (!c) {
        c = {};
      }
      if (c.bubbles === void 0) {
        c.bubbles = true;
      }
      if (c.cancelable === void 0) {
        c.cancelable = true;
      }
      d = new Event(b, c);
    } else {
      try {
        d = new m.CustomEvent(b, {detail: c});
      } catch (f) {
        d = m.CustomEvent(b, {detail: c});
      }
    }
    a.dispatchEvent(d);
  }, on(a, b, c) {
    a = a.split(" ");
    const d = a.length;
    for (let f = 0; f < d; ++f) {
      if (this.events[a[f]] === void 0) {
        this.events[a[f]] = [];
      }
      let g = {f: b};
      if (c === true) {
        g.o = true;
      }
      this.events[a[f]].push(g);
    }
    return this;
  }, off(a, b) {
    if (this.events[a]) {
      if (b) {
        const c = this.events[a];
        for (let d = c.length - 1; -1 < d; --d) {
          if (c[d].f === b) {
            this.events[a].splice(d, 1);
          }
        }
      } else {
        delete this.events[a];
      }
    }
    return this;
  }, trigger(a, b) {
    if (this.events[a]) {
      const c = this.events[a].reverse();
      if (!Array.isArray(b)) {
        b = [b];
      }
      for (let d = c.length - 1; -1 < d; --d) {
        if (c[d] !== void 0) {
          c[d].f.apply(null, b);
          if (c[d] !== void 0 && c[d].o === true) {
            this.events[a].splice(d, 1);
            if (Object.keys(this.events[a]).length === 0) {
              delete this.events[a];
              break;
            }
          }
        }
      }
    }
    return this;
  }, requestIdleCallback(a, b) {
    if (m.requestIdleCallback) {
      m.requestIdleCallback(a, {timeout: b});
    } else {
      setTimeout(a, b);
    }
  }, UpdateQueryString(a, b, c) {
    if (!c) {
      c = m.location.href;
    }
    var d = RegExp("([?|&])" + a + "=.*?(&|#|$)(.*)", "gi");
    if (d.test(c)) {
      if (b !== void 0 && b !== null) {
        return c.replace(d, "$1" + a + "=" + b + "$2$3");
      } else {
        return c.replace(d, "$1$3").replace(/(&|\?)$/, "");
      }
    }
    if (b !== void 0 && b !== null) {
      d = c.indexOf("?") !== -1 ? "&" : "?";
      const f = c.split("#");
      c = f[0] + d + a + "=" + b;
      if (f[1]) {
        c += "#" + f[1];
      }
      return c;
    }
    return c;
  }, selectWithParent(a, b) {
    let c;
    const d = a.indexOf(".") === -1 && a.indexOf("[") === -1;
    const f = d === true && (a === "video" || a === "audio" || a === "img");
    if (b && b[0] !== void 0) {
      b = b[0];
    }
    if (b) {
      c = d === false ? b.querySelectorAll(a) : f === true ? b.getElementsByTagName(a) : b.getElementsByClassName(a);
      if (d === true && b.classList.contains(a) || d === false && b.matches(a) || f === true && b.tagName.toLowerCase() === a) {
        c = this.convert(c, b);
      }
    } else {
      c = d === false ? k.querySelectorAll(a) : f === true ? k.getElementsByTagName(a) : k.getElementsByClassName(a);
    }
    return c;
  }, convert(a, b) {
    let c = a.length;
    const d = Array(c);
    while (c--) {
      d[c] = a[c];
    }
    if (b) {
      d.push(b);
    }
    return d;
  }, Init() {
    this.is_builder_active = k.body.classList.contains("themify_builder_active");
    this.body = w("body");
    const a = this;
    const b = function () {
      a.w = m.innerWidth;
      a.h = m.innerHeight;
      a.isRTL = a.body[0].classList.contains("rtl");
      a.isTouch = !!("ontouchstart" in m) || !!(0 < navigator.msMaxTouchPoints);
      a.lazyDisable = a.is_builder_active === true || a.body[0].classList.contains("tf_lazy_disable");
      if (a.isTouch) {
        var c = typeof m.screen !== "undefined" && typeof m.screen.orientation !== "undefined" ? m.screen.orientation.angle : m.orientation;
        c = c === 90 || c === -90 ? a.h : a.w;
        if (769 > c) {
          a.device = 681 > c ? "mobile" : "tablet";
        }
      }
      c = new Image;
      const d = function (f) {
        let g = " page-loaded";
        if (f) {
          g += " " + f;
        }
        f = a.body[0];
        if (typeof woocommerce_params !== "undefined") {
          f.classList.remove("woocommerce-no-js");
          g += " woocommerce-js";
        }
        f.className += g;
      };
      a.hasDecode = "decode" in c;
      if (typeof themify_vars === "undefined") {
        c = k.getElementById("tf_vars");
        const f = k.createElement("script");
        f.type = "text/javascript";
        f.textContent = c.textContent;
        c.parentNode.replaceChild(f, c);
      }
      a.is_min = themify_vars.is_min ? true : false;
      a.url = themify_vars.url;
      a.jsUrl = a.url + "/js/modules/";
      a.js_modules = themify_vars.js_modules;
      a.css_modules = themify_vars.css_modules;
      if (!m.IntersectionObserver) {
        a.LoadAsync(a.jsUrl + "fallback.js");
      }
      if (themify_vars.done !== void 0) {
        a.cssLazy = themify_vars.done;
        delete themify_vars.done;
      }
      a.mobileMenu();
      a.trigger("tf_init");
      m.loaded = true;
      if (themify_vars && !themify_vars.is_admin) {
        if (themify_vars.theme_js) {
          a.LoadAsync(themify_vars.theme_js, null, themify_vars.theme_v);
          delete themify_vars.theme_js;
        }
        if (a.is_builder_active === false) {
          if (m.tbLocalScript && k.getElementsByClassName("module_row")[0]) {
            a.LoadAsync(m.tbLocalScript.builder_url + "/js/themify.builder.script.js", function () {
              a.is_builder_loaded = true;
              d("has-builder");
              a.lazyLoading();
            }, null, null, function () {
              return typeof ThemifyBuilderModuleJs !== "undefined";
            });
          } else {
            d();
            a.lazyLoading();
          }
          a.loadFonts();
          a.stickyBuy();
        } else {
          d();
        }
        requestAnimationFrame(function () {
          a.initWC();
          setTimeout(function () {
            a.InitGallery();
          }, 800);
        });
      }
      a.initResizeHelper();
      if (a.is_builder_active === false) {
        a.touchDropDown();
      }
    };
    if (k.readyState === "complete" || a.is_builder_active === true) {
      b();
    } else {
      m.addEventListener("load", b, {once: true, passive: true});
    }
  }, FixedHeader(a) {
    if (!this.is_builder_active && m.IntersectionObserver) {
      if (this.jsLazy.fixedheader === void 0) {
        const b = this;
        this.LoadAsync(this.js_modules.fxh, function () {
          b.jsLazy.fixedheader = true;
          b.trigger("tf_fixed_header_init", a);
        }, null, null, function () {
          return !!b.jsLazy.fixedheader;
        });
      } else {
        this.trigger("tf_fixed_header_init", a);
      }
    }
  }, initComponents(a, b) {
    if (b !== true || a[0].tagName !== "IMG") {
      var c = null;
      if (b === true) {
        if (a[0].classList.contains("tf_carousel")) {
          c = a;
        }
      } else {
        c = this.selectWithParent("tf_carousel", a);
      }
      if (c !== null && 0 < c.length) {
        this.InitCarousel(c);
      }
      c = null;
      if (b === true) {
        if (a[0].classList.contains("themify_map")) {
          c = a;
        }
      } else {
        c = this.selectWithParent("themify_map", a);
      }
      if (c !== null && 0 < c.length) {
        this.InitMap(c);
      }
      c = null;
      if (b === true) {
        if (a[0].classList.contains("auto_tiles")) {
          c = a;
        }
      } else {
        c = this.selectWithParent("auto_tiles", a);
      }
      if (c !== null && 0 < c.length) {
        this.autoTiles(c);
      }
      c = null;
      if (b === true) {
        if (a[0].hasAttribute("data-lax")) {
          c = a;
        }
      } else {
        c = this.selectWithParent("[data-lax]", a);
      }
      if (c !== null && 0 < c.length) {
        this.lax(c, null);
      }
      c = null;
      if (b === true) {
        if (a[0].tagName === "VIDEO") {
          c = a;
        }
      } else {
        c = this.selectWithParent("video", a);
      }
      if (c !== null && 0 < c.length) {
        this.video(c);
      }
      c = null;
      if (b === true) {
        if (a[0].tagName === "AUDIO") {
          c = a;
        }
      } else {
        c = this.selectWithParent("audio", a);
      }
      if (c !== null && 0 < c.length) {
        this.audio(c);
      }
      c = null;
      if (b === true) {
        if (a[0].classList.contains("masonry")) {
          c = a;
        }
      } else {
        c = this.selectWithParent("masonry", a);
      }
      if (c !== null && 0 < c.length) {
        this.isoTop(c);
      }
    }
  }, fontAwesome: function (a) {
    if (a) {
      if (typeof a === "string") {
        a = [a];
      } else if (!Array.isArray(a)) {
        if (a instanceof jQuery) {
          a = a[0];
        }
        a = this.selectWithParent("tf_fa", a);
      }
    } else {
      a = k.getElementsByClassName("tf_fa");
    }
    const b = {};
    const c = [];
    const d = [];
    const f = k.getElementById("tf_svg").firstChild;
    var g ;
    try{
    	g = f.getElementsByTagName("symbol");

    }catch(e){
    	return
    }
    for (var e = g.length - 1; -1 < e; --e) {
      b[g[e].id] = true;
    }
    for (g = a.length - 1; -1 < g; --g) {
      if ((e = a[g].classList ? a[g].classList[1] : a[g]) && !b[e]) {
        if (this.fontsQueue[e] === void 0) {
          this.fontsQueue[e] = true;
          var h = e.replace("tf-", "");
          e = h.split("-");
          if (e[0] === "fas" || e[0] === "far" || e[0] === "fab") {
            h = e[0];
            e.shift();
            h = h + " " + e.join("-");
          }
          c.push(h);
        }
        if (a[g].classList) {
          e = a[g].parentNode;
          e.classList.add("tf_lazy");
          d.push(e);
        }
      }
    }
    if (0 < c.length) {
      const l = this;
      setTimeout(function () {
        const q = new Headers({Accept: "application/json", "X-Requested-With": "XMLHttpRequest"});
        const t = new FormData;
        t.append("action", "tf_load_icons");
        t.append("icons", JSON.stringify(c));
        fetch(themify_vars.ajax_url, {method: "POST", headers: q, body: t}).then(n => n.json()).then(n => {
          const r = k.createDocumentFragment();
          var u = [];
          for (let v in n) {
            let x = k.createElementNS("http://www.w3.org/2000/svg", "symbol");
            let z = k.createElementNS("http://www.w3.org/2000/svg", "path");
            let A = "tf-" + v.replace(" ", "-");
            let y = "0 0 ";
            y += n[v].vw ? n[v].vw : "32";
            y += " 32";
            x.id = A;
            x.setAttributeNS(null, "viewBox", y);
            z.setAttributeNS(null, "d", n[v].p);
            x.appendChild(z);
            r.appendChild(x);
            if (n[v].w) {
              u.push(".tf_fa." + A + "{width:" + n[v].w + "em}");
            }
          }
          f.appendChild(r);
          if (0 < u.length) {
            n = k.getElementById("tf_fonts_style");
            if (n === null) {
              n = k.createElement("style");
              n.id = "tf_fonts_style";
              n.cssText = "";
            }
            n.cssText += u.join("");
          }
          l.fontsQueue = {};
          for (u = d.length - 1; -1 < u; --u) {
            if (d[u]) {
              d[u].classList.remove("tf_lazy");
            }
          }
        });
      }, this.is_builder_active ? 5 : 2e3);
    }
  }, loadFonts() {
    const a = this;
    if (a.cssLazy["framework-css"] || a.is_builder_active !== true && !k.getElementsByClassName("shortcode")[0]) {
      a.cssLazy["framework-css"] = false;
    } else {
      const b = k.getElementById("themify-framework-css");
      if (b === null) {
        a.cssLazy["framework-css"] = false;
      } else {
        a.LoadCss(b.getAttribute("data-href"), false, b, null, function () {
          a.cssLazy["framework-css"] = true;
        });
      }
    }
    this.requestIdleCallback(function () {
      a.fontAwesome();
    }, 200);
    if (themify_vars.commentUrl) {
      setTimeout(function () {
        a.loadComments();
      }, 3e3);
    }
    if (themify_vars.wp_emoji) {
      setTimeout(function () {
        a.loadExtra(themify_vars.wp_emoji, null, false, function () {
          m._wpemojiSettings.DOMReady = true;
        });
        themify_vars.wp_emoji = null;
      }, 5100);
    }
  }, loadComments(a) {
    if (!m.addComment && themify_vars.commentUrl) {
      let b = k.getElementById("cancel-comment-reply-link");
      if (b && (b = b.closest("#comments"))) {
        const c = this;
        const d = function () {
          this.removeEventListener("focusin", d, {once: true, passive: true});
          this.removeEventListener(c.isTouch ? "touchstart" : "mouseenter", d, {once: true, passive: true});
          c.LoadAsync(themify_vars.commentUrl, a, themify_vars.wp, null, function () {
            return !!m.addComment;
          });
          themify_vars.commentUrl = null;
        };
        b.addEventListener("focusin", d, {once: true, passive: true});
        b.addEventListener(this.isTouch ? "touchstart" : "mouseenter", d, {once: true, passive: true});
      }
    }
  }, InitCarousel(a, b) {
    if (a) {
      if (this.jsLazy.tf_carousel === void 0) {
        const c = this;
        this.LoadAsync(this.js_modules.tc, function () {
          c.jsLazy.tf_carousel = true;
          c.trigger("tf_carousel_init", [a, b]);
        }, null, null, function () {
          return !!c.jsLazy.tf_carousel;
        });
      } else {
        this.trigger("tf_carousel_init", [a, b]);
      }
    }
  }, InitMap(a) {
    if (0 < a.length) {
      if (this.jsLazy.tf_map === void 0) {
        const b = this;
        this.LoadAsync(this.js_modules.map, function () {
          b.jsLazy.tf_map = true;
          b.trigger("themify_map_init", [a]);
        }, null, null, function () {
          return !!m.ThemifyGoogleMap;
        });
      } else {
        this.trigger("themify_map_init", [a]);
      }
    }
  }, LoadAsync(a, b, c, d, f, g) {
    const e = this.hash(a);
    const h = !!this.jsLazy[e];
    if (h === false) {
      this.jsLazy[e] = true;
    }
    if (h === true || k.getElementById(e) !== null) {
      if (b) {
        if (f) {
          if (f() === true) {
            b();
          } else {
            if (this.jsCallbacks[e] === void 0) {
              this.jsCallbacks[e] = [];
            }
            this.jsCallbacks[e].push(b);
          }
        } else {
          b();
        }
      }
    } else if (f && f() === true) {
      if (d) {
        this.loadExtra(d);
      }
      if (b) {
        b();
      }
    } else {
      if (this.is_min === true && a.indexOf(".min.js") === -1 && a.indexOf(m.location.hostname) !== -1) {
        a = a.replace(".js", ".min.js");
      }
      if (!c && c !== false) {
        c = themify_vars.version;
      }
      f = k.createElement("script");
      var l = this;
      f.setAttribute("id", e);
      if (g !== false) {
        g = "async";
      }
      f.setAttribute("async", g);
      if (c) {
        a += "?ver=" + c;
      }
      f.addEventListener("load", function () {
        if (b) {
          b();
        }
        const q = this.getAttribute("id");
        if (l.jsCallbacks[q]) {
          let t = 0;
          for (let n = l.jsCallbacks[q].length; t < n; ++t) {
            l.jsCallbacks[q][t]();
          }
          delete l.jsCallbacks[q];
        }
      }, {passive: true, once: true});
      f.setAttribute("src", a);
      k.head.appendChild(f);
      if (d) {
        this.loadExtra(d, f);
      }
    }
  }, loadExtra(a, b, c, d) {
    if (a) {
      if (typeof b === "string") {
        b = k.querySelector("script#" + b);
        if (b === null) {
          return;
        }
      }
      let g = "";
      if (b && a.before) {
        if (typeof a.before === "string") {
          g = a.before;
        } else {
          for (var f in a.before) {
            if (a.before[f]) {
              g += a.before[f];
            }
          }
        }
        if (g !== "") {
          f = k.createElement("script");
          f.type = "text/javascript";
          f.text = g;
          b.parentNode.insertBefore(f, b);
        }
      }
      if (typeof a === "string") {
        g = a;
      } else {
        g = "";
        for (let e in a) {
          if (e !== "before" && a[e]) {
            g += a[e];
          }
        }
      }
      if (g !== "") {
        a = k.createElement("script");
        a.type = "text/javascript";
        a.text = g;
        if (c === void 0 || c === true) {
          k.head.appendChild(a);
        } else {
          k.body.appendChild(a);
        }
        if (d) {
          d();
        }
      }
    }
  }, LoadCss(a, b, c, d, f) {
    if (!b && b !== false) {
      b = themify_vars.version;
    }
    var g = this.hash(a);
    b = b ? a + "?ver=" + b : a;
    if (this.is_min === true && a.indexOf(".min.css") === -1 && a.indexOf(m.location.hostname) !== -1) {
      b = b.replace(".css", ".min.css");
    }
    if (this.cssLazy[g] === true) {
      if (f) {
        c = k.getElementById(g);
        if (c !== null && c.getAttribute("media") !== "only_x") {
          f();
        } else {
          if (this.cssCallbacks[g] === void 0) {
            this.cssCallbacks[g] = [];
          }
          this.cssCallbacks[g].push(f);
        }
      }
      return false;
    } else {
      this.cssLazy[g] = true;
    }
    if (!d) {
      d = "all";
    }
    a = k.createElement("link");
    const e = this;
    const h = function () {
      this.setAttribute("media", d);
      const l = this.getAttribute("id");
      const q = function () {
        const t = k.styleSheets;
        let n = false;
        for (let r = t.length - 1; -1 < r; --r) {
          if (t[r].ownerNode.id === l) {
            n = true;
            break;
          }
        }
        if (n === true) {
          if (f) {
            f();
          }
          if (e.cssCallbacks[l]) {
            let r = 0;
            for (let u = e.cssCallbacks[l].length; r < u; ++r) {
              e.cssCallbacks[l][r]();
            }
            delete e.cssCallbacks[l];
          }
        } else {
          setTimeout(q, 80);
        }
      };
      if (f || e.cssCallbacks[l] !== void 0) {
        q();
      }
    };
    if (b.indexOf("http") === -1) {
      const l = k.createElement("a");
      l.href = b;
      b = l.href;
    }
    a.setAttribute("href", b);
    a.setAttribute("rel", "stylesheet");
    a.setAttribute("importance", "low");
    a.setAttribute("media", "only_x");
    a.setAttribute("id", g);
    if ("isApplicationInstalled" in navigator) {
      a.onloadcssdefined(h);
    } else {
      a.addEventListener("load", h, {passive: true, once: true});
    }
    g = c;
    if (!g) {
      g = (g = k.getElementById("tf_lazy_common")) ? g.nextSibling : k.head.firstElementChild;
    }
    g.parentNode.insertBefore(a, c ? g : g.nextSibling);
  }, InitGallery() {
    var a = this.is_builder_active === false && themify_vars.lightbox ? themify_vars.lightbox : false;
    if (a !== false && a.lightboxOn !== false && this.jsLazy.tf_gallery_init === void 0) {
      this.jsLazy.tf_gallery_init = true;
      const b = this;
      const c = m.location.hash.replace("#", "");
      const d = b.body.parent();
      const f = {extraLightboxArgs: themify_vars.extraLightboxArgs, lightboxSelector: a.lightboxSelector ? a.lightboxSelector : ".themify_lightbox", gallerySelector: a.gallerySelector ? a.gallerySelector : ".gallery-item a", contentImagesAreas: a.contentImagesAreas, i18n: a.i18n ? a.i18n : []};
      if (a.disable_sharing) {
        f.disableSharing = a.disable_sharing;
      }
      let g = false;
      const e = function (l) {
        return l.match(/\.(gif|jpg|jpeg|tiff|png|webp|apng)(\?fit=\d+(,|%2C)\d+)?(&ssl=\d+)?$/i);
      };
      const h = function (l) {
        l.preventDefault();
        l.stopImmediatePropagation();
        if (g !== true) {
          g = true;
          var q = w(l.currentTarget);
          l = q[0].getAttribute("href");
          var t = k.createElement("div");
          var n = k.createElement("div");
          var r = function () {
            if (b.cssLazy.tf_lightbox === true && b.jsLazy.tf_lightbox === true && b.jsLazy.tf_gallery === true) {
              d.off("click.tf_gallery");
              b.trigger("tf_gallery_init", f);
              q.click();
              t.remove();
            }
          };
          t.className = "tf_lazy_lightbox tf_w tf_h";
          if (l && e(l)) {
            t.textContent = "Loading...";
            n = new Image;
            n.decoding = "async";
            n.src = l;
          } else {
            n.className = "tf_lazy tf_w tf_h";
            t.appendChild(n);
          }
          b.body[0].appendChild(t);
          if (!b.cssLazy.tf_lightbox) {
            b.LoadCss(b.css_modules.lb, null, null, null, function () {
              b.cssLazy.tf_lightbox = true;
              r();
            });
          }
          if (!b.jsLazy.tf_lightbox) {
            b.LoadAsync(b.js_modules.lb, function () {
              b.jsLazy.tf_lightbox = true;
              r();
            }, "1.1.0", null, function () {
              return typeof w.fn.magnificPopup !== "undefined";
            });
          }
          if (!b.jsLazy.tf_gallery) {
            b.LoadAsync(b.js_modules.gal, function () {
              b.jsLazy.tf_gallery = true;
              r();
            }, null, null, function () {
              return !!b.jsLazy.tf_gallery;
            });
          }
          r();
        }
      };
      d.on("click.tf_gallery", f.lightboxSelector, h);
      if (f.gallerySelector) {
        d.on("click.tf_gallery", f.gallerySelector, function (l) {
          if (e(this.getAttribute("href")) && !this.closest(".module-gallery")) {
            h(l);
          }
        });
      }
      if (a.contentImagesAreas) {
        d.on("click.tf_gallery", ".post-content a", function (l) {
          if (e(this.getAttribute("href")) && w(this).closest(f.contentImagesAreas)) {
            h(l);
          }
        });
      }
      if (c && c !== "#") {
        a = k.querySelector('img[alt="' + decodeURI(c) + '"]');
        if ((a = a === null ? k.querySelector('img[title="' + decodeURI(c) + '"]') : a) && (a = a.closest(".themify_lightbox"))) {
          a.click();
        }
      }
    }
  }, parseVideo(a) {
    a = a.match(/(http:|https:|)\/\/(player.|www.)?(vimeo\.com|youtu(be\.com|\.be|be\.googleapis\.com))\/(video\/|embed\/|watch\?v=|v\/)?([A-Za-z0-9._%-]*)(&\S+)?/i);
    return {type: a !== null ? -1 < a[3].indexOf("youtu") ? "youtube" : -1 < a[3].indexOf("vimeo") ? "vimeo" : false : false, id: a !== null ? a[6] : false};
  }, hash(a) {
    let b = 0;
    for (let c = a.length - 1; -1 < c; --c) {
      b = (b << 5) - b + a.charCodeAt(c);
      b &= b;
    }
    return b;
  }, scrollTo(a, b, c, d) {
    if (!b) {
      b = 800;
    }
    if (!a) {
      a = 0;
    }
    const f = w("html,body");
    const g = f.css("scroll-behavior") === "smooth";
    if (g) {
      f.css("scroll-behavior", "auto");
    }
    f.stop().animate({scrollTop: a}, {progress: d, duration: b, done: function () {
      if (g) {
        f.css("scroll-behavior", "");
      }
      if (c) {
        c();
      }
    }});
  }, imagesLoad(a, b) {
    const c = function (d, f) {
      if (f || typeof d !== "function") {
        if (d === null) {
          if (typeof f === "function") {
            f();
          }
        } else if (d instanceof jQuery) {
          d.imagesLoaded().always(f);
        } else {
          imagesLoaded(d, f);
        }
      } else {
        d();
      }
    };
    if (m.imagesLoaded === void 0) {
      this.LoadAsync(this.js_modules.img, c.bind(null, a, b), themify_vars.i_v, null, function () {
        return !!m.imagesLoaded;
      });
    } else {
      c(a, b);
    }
  }, autoTiles(a, b) {
    if (a && a.length !== 0) {
      if (this.jsLazy.tf_autotiles === void 0) {
        const c = this;
        this.LoadAsync(this.js_modules.at, function () {
          c.jsLazy.tf_autotiles = true;
          c.trigger("tf_autotiles_init", [a, b]);
        }, null, null, function () {
          return !!c.jsLazy.tf_autotiles;
        });
      } else {
        this.trigger("tf_autotiles_init", [a, b]);
      }
    }
  }, isoTop(a, b) {
    if (typeof a !== "string") {
      if (a instanceof jQuery) {
        a = a.get();
      } else if (a.length === void 0) {
        a = [a];
      }
      var c = [];
      for (let d = a.length - 1; -1 < d; --d) {
        let f = a[d].classList;
        if (!f.contains("masonry-done") && (!f.contains("auto_tiles") || !f.contains("list-post") || !a[d].previousElementSibling || !!a[d].previousElementSibling.classList.contains("post-filter"))) {
          c.push(a[d]);
        }
      }
      if (0 < c.length) {
        if (this.jsLazy.tf_isotop === void 0) {
          const d = this;
          if (m.imagesLoaded === void 0) {
            d.imagesLoad(null);
          }
          this.LoadAsync(this.js_modules.iso, function () {
            d.jsLazy.tf_isotop = true;
            d.trigger("tf_isotop_init", [c, b]);
          }, null, null, function () {
            return !!d.jsLazy.tf_isotop;
          });
        } else {
          this.trigger("tf_isotop_init", [c, b]);
        }
      }
    }
  }, reLayoutIsoTop() {
    this.trigger("tf_isotop_layout");
  }, infinity(a, b) {
    if (!!a && a.length !== 0 && this.is_builder_active !== true && (!!b.button || !b.hasOwnProperty("button")) && (!b.path || typeof b.path !== "string" || k.querySelector(b.path) !== null)) {
      if (b.append && !w(b.append).length) {
        if (b.button) {
          b.button.style.display = "block";
        }
      } else if (this.jsLazy.tf_infinite === void 0) {
        const c = this;
        this.LoadAsync(this.js_modules.inf, function () {
          c.jsLazy.tf_infinite = true;
          c.trigger("tf_infinite_init", [a, b]);
        }, null, null, function () {
          return !!c.jsLazy.tf_infinite;
        });
      } else {
        this.trigger("tf_infinite_init", [a, b]);
      }
    }
  }, lax(a, b) {
    if ((b === true || !this.is_builder_active) && a.length !== 0) {
      if (this.jsLazy.tf_lax === void 0) {
        const c = this;
        this.LoadAsync(this.js_modules.lax, function () {
          c.jsLazy.tf_lax = true;
          c.trigger("tf_lax_init", [a]);
        }, null, null, function () {
          return !!c.jsLazy.tf_lax;
        });
      } else {
        this.trigger("tf_lax_init", [a]);
      }
    }
  }, video(a, b) {
    if (!a || a.length === 0) {
      return false;
    }
    if (this.jsLazy.tf_video === void 0) {
      const c = this;
      const d = function () {
        if (c.cssLazy.tf_video === true && c.jsLazy.tf_video === true) {
          c.trigger("tf_video_init", [a, b]);
        }
      };
      this.LoadCss(c.css_modules.video, null, null, null, function () {
        c.cssLazy.tf_video = true;
        d();
      });
      this.LoadAsync(this.js_modules.video, function () {
        c.jsLazy.tf_video = true;
        d();
      }, null, null, function () {
        return !!c.jsLazy.tf_video;
      });
    } else {
      this.trigger("tf_video_init", [a, b]);
    }
  }, audio(a, b) {
    if (!a || a.length === 0) {
      return false;
    }
    if (this.jsLazy.tf_audio === void 0) {
      const c = this;
      const d = function () {
        if (c.cssLazy.tf_audio === true && c.jsLazy.tf_audio === true) {
          c.trigger("tf_audio_init", [a, b]);
        }
      };
      this.LoadCss(c.css_modules.audio, null, null, null, function () {
        c.cssLazy.tf_audio = true;
        d();
      });
      this.LoadAsync(this.js_modules.audio, function () {
        c.jsLazy.tf_audio = true;
        d();
      }, null, null, function () {
        return !!c.jsLazy.tf_audio;
      });
    } else {
      this.trigger("tf_audio_init", [a, b]);
    }
  }, lazyLoading(a) {
    if (this.lazyDisable !== true) {
      if (!a) {
        a = k;
      }
      var b = a instanceof HTMLDocument || a instanceof HTMLElement ? a.querySelectorAll("[data-lazy]") : a;
      var c = b.length;
      if (0 < c) {
        const d = this;
        const f = function (e, h, l) {
          for (let q = e.length - 1; -1 < q; --q) {
            if (d.lazyScrolling === null && e[q].isIntersecting === true) {
              h.unobserve(e[q].target);
              d.requestIdleCallback(function () {
                d.lazyScroll([e[q].target], l);
              }, 70);
            }
          }
        };
        let g;
        if (d.observer === null) {
          if (m.IntersectionObserver) {
            g = new m.IntersectionObserver(function (e, h) {
              f(e, h, true);
              h.disconnect();
              let l = false;
              const q = d.isTouch ? "touchstart" : "mousemove";
              const t = function () {
                if (l) {
                  l.disconnect();
                }
                l = null;
                m.removeEventListener(q, t, {once: true, passive: true});
                m.removeEventListener("scroll", t, {once: true, passive: true});
                d.observer = new m.IntersectionObserver(function (n, r) {
                  f(n, r);
                }, {rootMargin: "300px 0px 300px 0px"});
                for (let n = 0; n < c; ++n) {
                  if (b[n].hasAttribute("data-lazy") && !b[n].hasAttribute("data-tf-not-load")) {
                    d.observer.observe(b[n]);
                  }
                }
                setTimeout(function () {
                  const n = [];
                  let r = 0;
                  for (let u = 0; u < c; ++u) {
                    if (b[u].hasAttribute("data-tf-src") && b[u].hasAttribute("data-lazy")) {
                      if (10 > r) {
                        let v = b[u].getAttribute("data-tf-src");
                        if (v && !n[v]) {
                          n[v] = true;
                          let x = new Image;
                          x.decoding = "async";
                          x.src = v;
                          ++r;
                        }
                      } else {
                        break;
                      }
                    }
                  }
                  if (k.getElementsByClassName("wow")[0]) {
                    d.loadWowJs();
                  }
                }, 1500);
              };
              m.addEventListener("beforeprint", function () {
                d.lazyScroll(k.querySelectorAll("[data-lazy]"), true);
              }, {passive: true});
              m.addEventListener("scroll", t, {once: true, passive: true});
              m.addEventListener(q, t, {once: true, passive: true});
              setTimeout(function () {
                if (l === false) {
                  l = new m.IntersectionObserver(function (r, u) {
                    if (l !== null) {
                      f(r, u, true);
                    }
                    u.disconnect();
                  }, {threshold: .1});
                  const n = 15 < c ? 15 : c;
                  for (let r = 0; r < n; ++r) {
                    if (b[r] && b[r].hasAttribute("data-lazy") && !b[r].hasAttribute("data-tf-not-load")) {
                      l.observe(b[r]);
                    }
                  }
                }
              }, 1600);
            });
          }
        } else {
          g = d.observer;
        }
        if (g) {
          for (a = 0; a < c; ++a) {
            if (!b[a].hasAttribute("data-tf-not-load")) {
              g.observe(b[a]);
            }
          }
        }
      }
    }
  }, lazyScroll(a, b) {
    var c = 0;
    if (a) {
      c = a.length;
      if (c === void 0) {
        a = [a];
        c = 1;
      } else if (c === 0) {
        return;
      }
    }
    const d = function () {
      this.classList.remove("tf_svg_lazy_loaded", "tf_svg_lazy");
    };
    for (--c; -1 < c; --c) {
      let e = a[c];
      var f = e.tagName;
      if (e && e.hasAttribute("data-lazy")) {
        e.removeAttribute("data-lazy");
        if (f !== "IMG" && (f === "DIV" || !e.hasAttribute("data-tf-src"))) {
          f = w(e);
          try {
            e.classList.remove("tf_lazy");
            this.reRun(f, null, true);
            this.trigger("tf_lazy", f);
          } catch (h) {
            console.log(h);
          }
        } else if (f !== "svg") {
          var g = e.getAttribute("data-tf-src");
          let h = e.getAttribute("data-tf-srcset");
          if (g) {
            e.setAttribute("src", g);
            e.removeAttribute("data-tf-src");
          }
          if (h) {
            if (g = e.getAttribute("data-tf-sizes")) {
              e.setAttribute("sizes", g);
              e.removeAttribute("data-tf-sizes");
            }
            e.setAttribute("srcset", h);
            e.removeAttribute("data-tf-srcset");
          }
          e.removeAttribute("loading");
          if (e.classList.contains("tf_svg_lazy")) {
            this.imagesLoad(e, function (l) {
              const q = l.elements[0];
              requestAnimationFrame(function () {
                q.addEventListener("transitionend", d, {once: true, passive: true});
                q.classList.add("tf_svg_lazy_loaded");
              });
            });
          } else if (f !== "IFRAME" && b !== true && e.parentNode !== this.body[0]) {
            e.parentNode.classList.add("tf_lazy");
            this.imagesLoad(e, function (l) {
              l.elements[0].parentNode.classList.remove("tf_lazy");
            });
          }
        }
      } else if (e) {
        e.removeAttribute("data-lazy");
      }
      if (this.observer !== null && e) {
        this.observer.unobserve(e);
      }
    }
  }, reRun(a, b, c) {
    if (c !== true) {
      this.loadFonts();
    }
    if (typeof ThemifyBuilderModuleJs === "undefined") {
      if (!this.is_builder_loaded && themify_vars && !themify_vars.is_admin && m.tbLocalScript && k.getElementsByClassName("module_row")[0]) {
        const d = this;
        d.LoadAsync(m.tbLocalScript.builder_url + "/js/themify.builder.script.js", function () {
          d.is_builder_loaded = true;
          ThemifyBuilderModuleJs.loadOnAjax(a, b, c);
          d.initComponents(a, c);
        }, null, null, function () {
          return typeof ThemifyBuilderModuleJs !== "undefined";
        });
      } else {
        this.initComponents(a, c);
      }
    } else {
      ThemifyBuilderModuleJs.loadOnAjax(a, b, c);
      this.initComponents(a, c);
    }
  }, sideMenu(a, b, c) {
    if (a && a.length !== 0) {
      if (this.jsLazy.tf_sidemenu === void 0) {
        const d = this;
        this.LoadAsync(this.js_modules.side, function (f, g, e) {
          d.jsLazy.tf_sidemenu = true;
          d.trigger("tf_side_menu_init", [f, g, e]);
        }.bind(null, a, b, c), null, null, function () {
          return !!d.jsLazy.tf_sidemenu;
        });
      } else {
        this.trigger("tf_side_menu_init", [a, b, c]);
      }
    }
  }, edgeMenu(a) {
    const b = this;
    if (this.jsLazy.tf_edgeMenu === void 0) {
      this.jsLazy.tf_edgeMenu = true;
      if (k.getElementsByClassName("sub-menu")[0]) {
        this.LoadAsync(this.js_modules.edge, function () {
          b.trigger("tf_edge_menu", [a]);
        });
      }
    } else {
      b.trigger("tf_edge_menu", [a]);
    }
  }, wayPoints(a) {
    if (this.jsLazy.wayPoints === void 0) {
      const b = this;
      this.LoadAsync(b.url + "/js/waypoints.min.js", function (c) {
        b.jsLazy.wayPoints = true;
        c();
      }.bind(null, a), "4.0.0", null, function () {
        return typeof w.fn.waypoint !== "undefined";
      });
    } else {
      a();
    }
  }, loadAnimateCss(a) {
    if (this.cssLazy.animate === void 0) {
      const b = this;
      this.LoadCss(b.css_modules.an, themify_vars.a_v, null, null, function () {
        b.cssLazy.animate = true;
        if (a) {
          a();
        }
      });
    } else if (a) {
      a();
    }
  }, loadWowJs(a) {
    if (this.jsLazy.tf_wow === void 0 || this.cssLazy.animate === void 0) {
      const b = this;
      const c = function () {
        if (b.cssLazy.animate === true && b.jsLazy.tf_wow === true && a) {
          a();
        }
      };
      if (this.cssLazy.animate === void 0) {
        this.loadAnimateCss(c);
      }
      if (this.jsLazy.tf_wow === void 0) {
        this.LoadAsync(this.js_modules.wow, function () {
          b.jsLazy.tf_wow = true;
          c();
        }, null, null, function () {
          return !!b.jsLazy.tf_wow;
        });
      }
    } else if (a) {
      a();
    }
  }, sharer(a, b, c) {
    if (this.jsLazy.tf_sharer === void 0) {
      const d = this;
      this.LoadAsync(this.js_modules.share, function () {
        d.jsLazy.tf_sharer = true;
        d.trigger("tf_sharer_init", [a, b, c]);
      }, null, null, function () {
        return !!d.jsLazy.tf_sharer;
      });
    } else {
      this.trigger("tf_sharer_init", [a, b, c]);
    }
  }, loadDropDown(a, b, c) {
    if (a && a.length !== 0) {
      var d = this;
      if (c !== false) {
        this.LoadCss(d.css_modules.drop);
      }
      this.LoadAsync(this.js_modules.drop, function () {
        d.jsLazy.tf_dropdown = true;
        d.trigger("tf_dropdown_init", [a]);
        if (b) {
          b();
        }
      }, null, null, function () {
        return !!d.jsLazy.tf_dropdown;
      });
    }
  }, initResizeHelper() {
    let a = false;
    let b;
    let c;
    const d = this;
    const f = "onorientationchange" in m ? "orientationchange" : "resize";
    m.addEventListener(f, function () {
      if (!a) {
        a = true;
        if (b) {
          clearTimeout(b);
        }
        b = setTimeout(function () {
          if (c) {
            cancelAnimationFrame(c);
          }
          c = requestAnimationFrame(function () {
            const g = m.innerWidth;
            const e = m.innerHeight;
            if (e !== d.h || g !== d.w) {
              const h = {w: g, h: e, type: "tfsmartresize", origevent: f};
              d.trigger("tfsmartresize", h);
              w(m).triggerHandler("tfsmartresize", [h]);
              d.w = g;
              d.h = e;
            }
            a = false;
            c = b = null;
          });
        }, 150);
      }
    }, {passive: true});
  }, mobileMenu() {
    if (themify_vars.menu_point) {
      const a = this;
      const b = parseInt(themify_vars.menu_point);
      const c = function (d) {
        const f = a.body[0].classList;
        if (!d && a.w <= b || d && d.w <= b) {
          f.add("mobile_menu_active");
        } else if (d !== void 0) {
          f.remove("mobile_menu_active");
        }
      };
      c();
      this.on("tfsmartresize", c);
    }
  }, initWC(a) {
    if (themify_vars.wc_js) {
      const b = this;
      if (!themify_vars.wc_js_normal) {
        setTimeout(function () {
          k.addEventListener(b.isTouch ? "touchstart" : "mousemove", function () {
            const c = k.createDocumentFragment();
            for (let d in themify_vars.wc_js) {
              let f = k.createElement("link");
              let g = themify_vars.wc_js[d];
              if (g.indexOf("ver", 12) === -1) {
                g += "?ver=" + themify_vars.wc_version;
              }
              f.as = "script";
              f.rel = "prefetch";
              f.href = g;
              c.appendChild(f);
            }
            k.head.appendChild(c);
          }, {once: true, passive: true});
        }, 1800);
      }
      if (this.jsLazy.tf_wc === void 0) {
        this.LoadAsync(this.js_modules.wc, function () {
          b.jsLazy.tf_wc = true;
          b.trigger("tf_wc_init", a);
        }, null, null, function () {
          return !!b.jsLazy.tf_wc;
        });
      } else {
        this.trigger("tf_wc_init", a);
      }
    }
  }, megaMenu(a, b) {
    if (a && !a.dataset.init) {
      a.dataset.init = true;
      var c = this;
      var d = 1 * themify_vars.menu_point + 1;
      var f = function (e) {
        const h = e instanceof jQuery ? e : this;
        if ((e instanceof jQuery ? c.w : e.w) > d) {
          h.css("display", "");
        } else {
          c.on("tfsmartresize", f.bind(h), true);
        }
      };
      var g = function (e) {
        const h = e instanceof jQuery ? e : this;
        if (e.target && !h[0].parentNode.contains(e.target)) {
          h.css("display", "");
          h[0].parentNode.classList.remove("toggle-on");
        } else {
          k.addEventListener("touchstart", g.bind(h), {once: true});
        }
      };
      if (b || themify_vars.disableMega || !a.getElementsByClassName("mega-link")[0]) {
        if (!c.isTouch) {
          setTimeout(function () {
            c.edgeMenu();
          }, 1500);
        }
      } else {
        const e = function () {
          const h = function () {
            if (c.cssLazy.tf_megamenu === true && c.jsLazy.tf_megamenu === true) {
              c.trigger("tf_mega_menu", [a, d]);
            }
          };
          if (!c.cssLazy.tf_megamenu) {
            c.LoadCss(c.css_modules.mega, null, null, "screen and (min-width:" + d + "px)", function () {
              c.cssLazy.tf_megamenu = true;
              h();
            });
          }
          if (!c.jsLazy.tf_megamenu) {
            c.LoadAsync(c.js_modules.mega, function () {
              c.jsLazy.tf_megamenu = true;
              h();
            });
          }
          h();
        };
        if (this.w >= d || !this.isTouch) {
          e();
        } else if (this.isTouch) {
          const h = function () {
            const l = typeof this.screen !== "undefined" && typeof this.screen.orientation !== "undefined" ? this.screen.orientation.angle : this.orientation;
            if ((l === 90 || l === -90 ? this.innerHeight : this.innerWidth) >= d) {
              this.removeEventListener("orientationchange", h, {passive: true});
              e();
            }
          };
          m.addEventListener("orientationchange", h, {passive: true});
        }
      }
      a.addEventListener("click", function (e) {
        if (e.target.classList.contains("child-arrow") || e.target.tagName === "A" && (e.target.getAttribute("href") === "#" || e.target.parentNode.classList.contains("themify_toggle_dropdown"))) {
          var h = w(e.target);
          if (h[0].tagName === "A") {
            if (!h.find(".child-arrow")[0]) {
              return;
            }
          } else {
            h = h.parent();
          }
          e.preventDefault();
          e.stopPropagation();
          const l = h.parent();
          let q = null;
          let t = themify_vars.m_m_toggle !== void 0 && !l.hasClass("toggle-on") && c.w < d;
          if (t) {
            q = l.siblings(".toggle-on");
            t = 0 < q.length;
          }
          if (c.w < d || e.target.classList.contains("child-arrow") || 0 < h.find(".child-arrow:visible").length) {
            e = h.next("div, ul");
            h = e[0].getAttribute("style");
            if (c.w < d && (h === null || h === "")) {
              f(e);
            }
            h = k.getElementById("headerwrap");
            if (Themify.isTouch && !l.hasClass("toggle-on") && !Themify.body[0].classList.contains("mobile-menu-visible") && (h === null || 400 < h.offsetWidth)) {
              g(e);
              l.siblings(".toggle-on").removeClass("toggle-on");
            }
            e.toggle("fast");
            if (t) {
              e = q.find(">div,>ul");
              h = e[0].getAttribute("style");
              if (c.w < d && (h === null || h === "")) {
                f(e);
              }
              e.toggle("fast");
            }
          }
          if (t) {
            q.removeClass("toggle-on");
          }
          l.toggleClass("toggle-on");
        }
      });
      a.dataset.init = true;
    }
  }, touchDropDown() {
    const a = k.querySelectorAll("ul:not(.sub-menu)>.menu-item:first-child");
    for (let b = a.length - 1; -1 < b; --b) {
      let c = a[b].parentNode;
      let d = c.parentNode;
      if (d.tagName !== "LI" && !d.classList.contains("sub-menu")) {
        this.megaMenu(c);
      }
    }
  }, ajaxSearch(a) {
    if (a.el) {
      if (!a.type) {
        a.type = "dropdown";
      }
      if (a.type === "dropdown") {
        a.el.autocomplete = "off";
      }
      const b = this;
      a.el.addEventListener(a.type === "overlay" ? "click" : "focus", function (c) {
        c.preventDefault();
        c.stopImmediatePropagation();
        let d = !a.css;
        const f = this;
        const g = a.type;
        const e = g === "overlay" ? "dropdown" : "overlay";
        const h = function () {
          if (b.jsLazy.tf_ajax_search && b.cssLazy["tf_search_overlay_" + g] && d && (a.both !== true || b.cssLazy["tf_search_overlay_" + e])) {
            b.trigger("themify_overlay_search_init", a);
            b.triggerEvent(f, c.type);
            a = null;
          }
        };
        h();
        if (a.both === true && !b.cssLazy["tf_search_overlay_" + e]) {
          b.LoadCss(b.url + "/css/modules/search-form-" + e + ".css", null, null, null, function () {
            b.cssLazy["tf_search_overlay_" + e] = true;
            h();
          });
        }
        if (!b.cssLazy["tf_search_overlay_" + g]) {
          b.LoadCss(b.url + "/css/modules/search-form-" + g + ".css", null, null, null, function () {
            b.cssLazy["tf_search_overlay_" + g] = true;
            h();
          });
        }
        if (!b.jsLazy.tf_ajax_search) {
          b.LoadAsync(b.url + "/js/modules/ajax-search.js", function () {
            b.jsLazy.tf_ajax_search = true;
            h();
          }, b.v);
        }
        if (!d) {
          b.LoadCss(a.css.url, a.css.v, null, null, function () {
            d = true;
            h();
          });
        }
      }, {once: true});
    }
  }, stickyBuy() {
    if (m.IntersectionObserver) {
      const a = k.querySelector("#content .product") || k.querySelector(".tbp_template.product");
      const b = k.getElementById("tf_sticky_buy");
      const c = this;
      if (b && a) {
        new m.IntersectionObserver(function (d, f) {
          if (d[0].isIntersecting || 0 > d[0].boundingClientRect.top) {
            f.disconnect();
            let g = {};
            let e = function () {
              if (g.stb === true && g.stb_t === true && g.js_stb_t === true) {
                c.trigger("tf_sticky_buy_init", [a, b]);
                g = null;
              }
            };
            c.LoadCss(c.css_modules.stb, null, null, null, function () {
              g.stb = true;
              e();
            });
            if (c.css_modules.stb_t) {
              c.LoadCss(c.css_modules.stb_t, null, null, null, function () {
                g.stb_t = true;
                e();
              });
            } else {
              g.stb_t = true;
            }
            c.LoadAsync(c.js_modules.stb, function () {
              g.js_stb_t = true;
              e();
            });
          }
        }).observe(k.getElementById("tf_sticky_buy_observer"));
      }
    }
  }};
  Themify.Init();
}());
